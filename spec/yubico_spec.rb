# encoding: utf-8
require 'chefspec'
require 'spec_helper'

#describe 'nmdbase::yubico' do
#  let(:chef_run) { ChefSpec::Runner.new.converge(described_recipe) }
  # before do
  #   stub_command('grep \'auth required pam_yubico.so\' /etc/pam.d/sshd')
  #     .and_return(false)
  #   stub_data_bag_item('nmdbase', 'yubico').and_return(
  #     'id' => 'yubico',
  #     '_default' => {
  #       'users' => [
  #         'test_user:cccccexample'
  #       ],
  #     }
  #   )
  #   stub_data_bag_item('nmdbase', 'ssl').and_return(
  #     'id' => 'ssl',
  #     '_default' => {
  #       'crt' => 'test_crt',
  #       'key' => 'test_key'
  #     }
  #   )
  #   stub_command('test -f /var/run/pam-debug.log').and_return(false)
  # end

describe 'nmdbase::yubico - Ubuntu tests', :ubuntu do
    let(:chef_run) { ChefSpec::Runner.new(platform: 'ubuntu', version: '13.04').converge('nmdbase::yubico') }
    before do
      stub_command('grep \'auth required pam_yubico.so\' /etc/pam.d/sshd')
        .and_return(false)
      stub_data_bag_item('nmdbase', 'yubico').and_return(
        'id' => 'yubico',
        '_default' => {
          'users' => [
            'test_user:cccccexample'
          ],
        }
      )
      stub_data_bag_item('nmdbase', 'ssl').and_return(
        'id' => 'ssl',
        '_default' => {
          'crt' => 'test_crt',
          'key' => 'test_key'
        }
      )
      stub_command('test -f /var/run/pam-debug.log').and_return(false)
    end
    it 'Includes the openssh recipe.' do
      expect(chef_run).to include_recipe('openssh')
    end
    it 'Installs the openssh-client.' do
      expect(chef_run).to install_package('openssh-client')
    end
    it 'Installs the openssh-server.' do
      expect(chef_run).to install_package('openssh-server')
    end

    it 'Enables the ssh service.' do
      expect(chef_run).to enable_service('ssh')
    end

    it 'Starts the ssh service.' do
      expect(chef_run).to start_service('ssh')
    end

    it 'Creates the ssh configuration.' do
      expect(chef_run).to create_template('/etc/ssh/ssh_config').with(
        user: 'root',
        group: 'root',
        mode: '0644'
      )
    end

    it 'Creates the sshd configuration.' do
      expect(chef_run).to create_template('/etc/ssh/sshd_config').with(
        user: 'root',
        group: 'root',
        mode: '0644'
      )
    end

    it 'Installs PAM yubico library.' do
      expect(chef_run).to install_package('libpam-yubico')
    end

    it 'Creates a global yubico auth file.' do
      expect(chef_run).to create_template('/etc/yubikey_mappings').with(
        user: 'root',
        group: 'root',
        mode: 0644
      )
      expect(chef_run).to render_file('/etc/yubikey_mappings')
        .with_content(/^test_user:cccccexample$/)
    end

    path = '/etc/pam.d/sshd'
    it 'Configures the sshd PAM module.' do
      expect(chef_run).to create_template('/etc/pam.d/sshd').with(
        user: 'root',
        group: 'root',
        mode: 0644
      )
      expect(chef_run).to render_file(path)
        .with_content(/^# This file was generated by Chef for*.+$/)

      expect(chef_run).to render_file(path)
        .with_content(/^# Do NOT modify this file by hand!$/)
        # rubocop:disable LineLength, StringLiterals
      expect(chef_run).to render_file(path)
        .with_content(%r{^auth required pam_yubico.so mode=client try_first_pass authfile=\/etc\/yubikey_mappings debug})
        # rubocop:enable LineLength, StringLiterals
      expect(chef_run).to render_file(path)
        .with_content(/^@include common-auth$/)

      expect(chef_run).to render_file(path)
        .with_content(/^account    required     pam_nologin.so$/)

      expect(chef_run).to render_file(path)
        .with_content(/^@include common-account$/)

      expect(chef_run).to render_file(path)
        .with_content(/^@include common-session$/)

      expect(chef_run).to render_file(path)
        .with_content(/^session optional pam_motd.so # \[1\]$/)

      expect(chef_run).to render_file(path)
        .with_content(/^session optional pam_mail.so standard noenv # \[1\]$/)

      expect(chef_run).to render_file(path)
        .with_content(/^session required pam_limits.so$/)

      expect(chef_run).to render_file(path)
        .with_content(/^session required pam_env.so # \[1\]$/)

# rubocop:disable LineLength, StringLiterals
      expect(chef_run).to render_file(path)
        .with_content(%r{session required pam_env.so user_readenv=1 envfile=\/etc\/default\/locale})
# rubocop:enable LineLength, StringLiterals
      expect(chef_run).to render_file(path)
        .with_content(/^session required pam_limits.so$/)

      expect(chef_run).to render_file(path)
        .with_content(/^@include common-password$/)

    end

    it 'Prepares for PAM debug logging.' do
      expect(chef_run).to run_bash('Prepare for debug logging.')
    end
end

describe 'nmdbase::yubico - rhel family tests', :rhel do
    let(:chef_run) { ChefSpec::Runner.new(platform: 'centos', version: '6.5').converge('nmdbase::yubico') }
    before do
      stub_command('grep \'auth required pam_yubico.so\' /etc/pam.d/sshd')
        .and_return(false)
      stub_data_bag_item('nmdbase', 'yubico').and_return(
        'id' => 'yubico',
        '_default' => {
          'users' => [
            'test_user:cccccexample'
          ],
        }
      )
      stub_data_bag_item('nmdbase', 'ssl').and_return(
        'id' => 'ssl',
        '_default' => {
          'crt' => 'test_crt',
          'key' => 'test_key'
        }
      )
      stub_command('test -f /var/run/pam-debug.log').and_return(false)
    end
    it 'Includes the openssh recipe.' do
      expect(chef_run).to include_recipe('openssh')
    end
    it 'Installs/Upgrades yubikey packages' do
      expect(chef_run).to upgrade_yum_package('libyubikey')
      expect(chef_run).to upgrade_yum_package('pam_yubico')
    end
    it 'Creates the ssh configuration.' do
      expect(chef_run).to create_template('/etc/ssh/ssh_config').with(
        user: 'root',
        group: 'root',
        mode: '0644'
      )
    end

    it 'Creates the sshd configuration.' do
      expect(chef_run).to create_template('/etc/ssh/sshd_config').with(
        user: 'root',
        group: 'root',
        mode: '0600'
      )
    end
    it 'Creates a global yubico auth file.' do
      expect(chef_run).to create_template('/etc/yubikey_mappings').with(
        user: 'root',
        group: 'root',
        mode: 0644
      )
      expect(chef_run).to render_file('/etc/yubikey_mappings')
        .with_content(/^test_user:cccccexample$/)
    end
end
