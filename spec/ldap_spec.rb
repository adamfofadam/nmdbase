# encoding: utf-8
require 'chefspec'
require 'spec_helper'

describe 'nmdbase::ldap - ubuntu tests', :ubuntu do
  let(:chef_run) { ChefSpec::Runner.new(platform: 'ubuntu', version: '13.04').converge('nmdbase::ldap') }
  before do
    stub_data_bag_item('nmdbase', 'sssd_ldap').and_return(
      'id' => 'sssd_ldap',
      '_default' => {
        'conf' =>  [
          '[sssd]',
          'config_file_version = 2',
          'services = nss, pam',
          'domains = default',
          '[nss]',
          # rubocop:disable LineLength, StringLiterals
          'filter_users = root,ldap,named,avahi,haldaemon,dbus,radiusd,news,nscd',
          # rubocop:enable LineLength, StringLiterals
          '[pam]',
          '[domain/default]',
          'ldap_schema = rfc2307bis',
          'ldap_user_fullname = displayName',
          'ldap_user_search_base = ou=people,dc=example,dc=com',
          'ldap_group_search_base = ou=groups,dc=example,dc=com',
          'ldap_group_member = member',
          'ldap_group_nesting_level = 4',
          'ldap_tls_reqcert = never',
          'auth_provider = ldap',
          'ldap_schema = rfc2307bis',
          'krb5_realm = EXAMPLE.COM',
          'ldap_search_base = dc=example,dc=com',
          'ldap_group_member = uniquemember',
          'id_provider = ldap',
          'ldap_id_use_start_tls = True',
          'chpass_provider = ldap',
          'ldap_uri = ldaps://ldap.example.com',
          'krb5_kdcip = kerberos.example.com',
          'cache_credentials = True',
          'ldap_tls_cacertdir = /etc/openldap/cacerts',
          'entry_cache_timeout = 600',
          'ldap_network_timeout = 3',
          'krb5_realm = EXAMPLE.COM',
          'krb5_server = kerberos.example.com'
        ]
      }
    )
  end
  it 'Installs the sssd packages.' do
    expect(chef_run).to install_package('sssd')
    expect(chef_run).to install_package('libpam-sss')
    expect(chef_run).to install_package('libnss-sss')
  end
  it 'Configures PAM common-session to support ldap login.' do
    expect(chef_run).to create_template('/etc/pam.d/common-session').with(
       user: 'root',
       group: 'root',
       mode: 0644
     )
    expect(chef_run).to render_file('/etc/pam.d/common-session')
      .with_content(/^# This file was generated by Chef for*.+$/)
    expect(chef_run).to render_file('/etc/pam.d/common-session')
      .with_content(/^# Do NOT modify this file by hand!$/)
    expect(chef_run).to render_file('/etc/pam.d/common-session')
       .with_content(/^session \[default=1\] pam_permit.so$/)
    expect(chef_run).to render_file('/etc/pam.d/common-session')
      .with_content(/^session required pam_permit.so$/)
    expect(chef_run).to render_file('/etc/pam.d/common-session')
      .with_content(/^session optional pam_umask.so$/)
    expect(chef_run).to render_file('/etc/pam.d/common-session')
      .with_content(/^session required pam_unix.so$/)
    expect(chef_run).to render_file('/etc/pam.d/common-session')
      .with_content(/^session optional pam_ldap.so$/)
        # rubocop:disable LineLength, StringLiterals
    expect(chef_run).to render_file('/etc/pam.d/common-session')
      .with_content(%r{^session required pam_mkhomedir.so skel=\/etc\/skel umask=0022$})
        # rubocop:enable LineLength, StringLiterals
  end
  it 'Modifies the Name Service Switch to use LDAP.' do
    expect(chef_run).to create_template('/etc/nsswitch.conf').with(
          user: 'root',
          group: 'root',
          mode: 0644
        )
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^# This file was generated by Chef for*.+$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^# Do NOT modify this file by hand!$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^passwd:         files sss$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^shadow:         files sss$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^group:          files sss$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^hosts:          files dns$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^bootparams:     files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^ethers:         files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^netmasks:       files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^networks:       files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^protocols:      files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
      .with_content(/^rpc:            files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
      .with_content(/^services:       files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
      .with_content(/^netgroup:       files sss$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
      .with_content(/^publickey:      files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
      .with_content(/^automount:      files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
      .with_content(/^aliases:        files$/)
  end
  it 'Configures the sssd package to setup this instance as an ldap client.' do
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
      .with_content(/^# This file was generated by Chef for*.+$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^# Do NOT modify this file by hand!$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[sssd\]$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^config_file_version = 2$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^services = nss, pam$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^domains = default$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[nss\]$/)
    # rubocop:disable LineLength, StringLiterals
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
      .with_content(/^filter_users = root,ldap,named,avahi,haldaemon,dbus,radiusd,news,nscd$/)
    # rubocop:enable LineLength, StringLiterals
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[pam\]$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[domain\/default\]$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_schema = rfc2307bis$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_user_fullname = displayName$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_user_search_base = ou=people,dc=example,dc=com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_search_base = ou=groups,dc=example,dc=com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_member = member$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_nesting_level = 4$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_tls_reqcert = never$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^auth_provider = ldap$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_schema = rfc2307bis$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_realm = EXAMPLE.COM$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_search_base = dc=example,dc=com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_member = uniquemember$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^id_provider = ldap$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_id_use_start_tls = True$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^chpass_provider = ldap$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(%r{ldap_uri = ldaps:\/\/ldap.example.com})
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_kdcip = kerberos.example.com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^cache_credentials = True$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(%r{^ldap_tls_cacertdir = \/etc\/openldap\/cacerts$})
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^entry_cache_timeout = 600$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_network_timeout = 3$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_realm = EXAMPLE.COM$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_server = kerberos.example.com$/)
  end
end
describe 'nmdbase::ldap - rhel tests', :rhel do
  let(:chef_run) { ChefSpec::Runner.new(platform: 'centos', version: '6.5').converge('nmdbase::ldap') }
  before do
    stub_data_bag_item('nmdbase', 'sssd_ldap').and_return(
      'id' => 'sssd_ldap',
      '_default' => {
        'conf' =>  [
          '[sssd]',
          'config_file_version = 2',
          'services = nss, pam',
          'domains = default',
          '[nss]',
          # rubocop:disable LineLength, StringLiterals
          'filter_users = root,ldap,named,avahi,haldaemon,dbus,radiusd,news,nscd',
          # rubocop:enable LineLength, StringLiterals
          '[pam]',
          '[domain/default]',
          'ldap_schema = rfc2307bis',
          'ldap_user_fullname = displayName',
          'ldap_user_search_base = ou=people,dc=example,dc=com',
          'ldap_group_search_base = ou=groups,dc=example,dc=com',
          'ldap_group_member = member',
          'ldap_group_nesting_level = 4',
          'ldap_tls_reqcert = never',
          'auth_provider = ldap',
          'ldap_schema = rfc2307bis',
          'krb5_realm = EXAMPLE.COM',
          'ldap_search_base = dc=example,dc=com',
          'ldap_group_member = uniquemember',
          'id_provider = ldap',
          'ldap_id_use_start_tls = True',
          'chpass_provider = ldap',
          'ldap_uri = ldaps://ldap.example.com',
          'krb5_kdcip = kerberos.example.com',
          'cache_credentials = True',
          'ldap_tls_cacertdir = /etc/openldap/cacerts',
          'entry_cache_timeout = 600',
          'ldap_network_timeout = 3',
          'krb5_realm = EXAMPLE.COM',
          'krb5_server = kerberos.example.com'
        ]
      }
    )
  end
#describe 'rhel family tests', :rhel do
  it 'Installs the sssd package.' do
    expect(chef_run).to install_package('sssd')
  end
  it 'Installs/updates authconfig.' do
    expect(chef_run).to install_package('authconfig')
  end
  it 'Modifies the Name Service Switch to use LDAP.' do
    expect(chef_run).to create_template('/etc/nsswitch.conf').with(
          user: 'root',
          group: 'root',
          mode: 0644
        )
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^# This file was generated by Chef for*.+$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^# Do NOT modify this file by hand!$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^passwd: files sss$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^group: files sss$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^shadow: files sss$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^hosts: files dns$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^networks: files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^protocols: db files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^services: db files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^ethers: db files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
        .with_content(/^rpc: db files$/)
    expect(chef_run).to render_file('/etc/nsswitch.conf')
      .with_content(/^netgroup: nis$/)
  end
  it 'Configures the sssd package to setup this instance as an ldap client.' do
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
      .with_content(/^# This file was generated by Chef for*.+$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^# Do NOT modify this file by hand!$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[sssd\]$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^config_file_version = 2$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^services = nss, pam$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^domains = default$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[nss\]$/)
    # rubocop:disable LineLength, StringLiterals
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
      .with_content(/^filter_users = root,ldap,named,avahi,haldaemon,dbus,radiusd,news,nscd$/)
    # rubocop:enable LineLength, StringLiterals
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[pam\]$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^\[domain\/default\]$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_schema = rfc2307bis$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_user_fullname = displayName$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_user_search_base = ou=people,dc=example,dc=com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_search_base = ou=groups,dc=example,dc=com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_member = member$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_nesting_level = 4$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_tls_reqcert = never$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^auth_provider = ldap$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_schema = rfc2307bis$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_realm = EXAMPLE.COM$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_search_base = dc=example,dc=com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_group_member = uniquemember$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^id_provider = ldap$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_id_use_start_tls = True$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^chpass_provider = ldap$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(%r{ldap_uri = ldaps:\/\/ldap.example.com})
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_kdcip = kerberos.example.com$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^cache_credentials = True$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(%r{^ldap_tls_cacertdir = \/etc\/openldap\/cacerts$})
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^entry_cache_timeout = 600$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^ldap_network_timeout = 3$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_realm = EXAMPLE.COM$/)
    expect(chef_run).to render_file('/etc/sssd/sssd.conf')
     .with_content(/^krb5_server = kerberos.example.com$/)
  end
end
